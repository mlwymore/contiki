Index: uaodv.c
===================================================================
RCS file: /cvsroot/contiki/contiki-2.x/core/net/uaodv.c,v
retrieving revision 1.36
diff -u -r1.36 uaodv.c
--- uaodv.c	28 Nov 2007 12:52:34 -0000	1.36
+++ uaodv.c	25 Nov 2009 14:24:49 -0000
@@ -33,26 +33,31 @@
 
 /**
  * \file
- *         Micro implementation of the AODV ad hoc routing protocol
- * \author
- *         Adam Dunkels <adam@sics.se>
+ *         Micro implementation of the AODV ad hoc routing protocol,
+ *         with support for IPv6
+ *
+ * \author Adam Dunkels <adam@sics.se>
+ * \author Gidon Ernst  <gidon.ernst@googlemail.com>
+ * \author Thomas Mair  <mair.thomas@gmx.net>
+ *
  */
 
-#include <stdio.h>
-#include <stdarg.h>
-
 #include "contiki.h"
 #include "net/uaodv-def.h"
 #include "net/uaodv-rt.h"
 
-#define NDEBUG
-#include "lib/assert.h"
+#define DEBUG 1
 
-#ifdef CC2420_RADIO
-#include "dev/cc2420.h"
-#define RSSI_THRESHOLD -39	/* accept -39 ... xx */
+#if DEBUG
+#include <stdio.h>
+#define PRINTF(...) printf(__VA_ARGS__)
+#else
+#define PRINTF(...)
 #endif
 
+
+#include "util.h"
+
 /* This implementation never expires routes!!! */
 #define MY_ROUTE_TIMEOUT 0x7fffffff /* Should be 0xffffffff! */
 #define MY_NET_DIAMETER  20
@@ -110,27 +115,26 @@
   uip_ipaddr_copy(&fwcache[n].orig, orig);
 }
 
-#ifdef NDEBUG
-#define PRINTF(...) do {} while (0)
-#define print_debug(...) do{}while(0)
+static int
+is_hostaddr(uip_ipaddr_t *addr) {
+#if UIP_CONF_IPV6
+      return uip_netif_addr_lookup(addr, 128, 0)!=NULL;
 #else
-#define PRINTF(...) printf(__VA_ARGS__)
-#ifdef __GNUC__
-static void
-print_debug(const char *fmt, ...) __attribute__((format(printf, 1, 2)));
-#endif /* __GNUC__ */
-static void
-print_debug(const char *fmt, ...)
-{
-  va_list ap;
-
-  va_start(ap, fmt);
-  printf("%d.%d.%d.%d: ", uip_ipaddr_to_quad(&uip_hostaddr));
-  vprintf(fmt, ap);
-  va_end(ap);
-  return;
+	  return uip_ipaddr_cmp(addr, &uip_hostaddr);
+#endif
 }
+
+static uip_ipaddr_t
+*get_hostaddr(uip_ipaddr_t *orig) {
+#if UIP_CONF_IPV6
+      struct uip_netif_addr *netif_addr =
+          uip_netif_addr_lookup(orig, UIP_DEFAULT_PREFIX_LEN, 0);
+      if(netif_addr == NULL) return NULL;
+      return &netif_addr->ipaddr;
+#else
+	  return &uip_hostaddr;
 #endif
+}
 
 #define BUF ((struct uip_udpip_hdr *)&uip_buf[UIP_LLH_LEN])
 #define uip_udp_sender() (&BUF->srcipaddr)
@@ -151,49 +155,13 @@
   uip_udp_packet_send(unicastconn, buf, len);
 }
 /*---------------------------------------------------------------------------*/
-#ifdef AODV_BAD_HOP_EXTENSION
-static unsigned
-add_rreq_extensions(void *_p)
-{
-  struct uaodv_bad_hop_ext *p = _p;
-  uip_ipaddr_t *a = p->addrs;
-  unsigned i, n;
-
-#define SCALE_RETRANS_THRESHOLD (3*4)
-
-  cc2420_check_remote(0xffff); /* Age table. */
-  n = 0;
-  for (i = 0; i < NNEIGBOURS; i++) {
-    if (neigbours[i].nretrans >= SCALE_RETRANS_THRESHOLD
-	&& neigbours[i].mac != 0xffff) {
-      a->u16[0] = uip_hostaddr.u16[0];
-      a->u16[1] = neigbours[i].mac;
-      n++;
-      if(n == 15)
-	break;			/* Avoid buffer overrun */
-      print_debug("BAD HOP %d.%d.%d.%d\t%d\n",
-		  uip_ipaddr_to_quad(a), neigbours[i].nretrans);
-    }
-  }
-
-  if(n == 0)
-    return 0;
-
-  p->type = RREQ_BAD_HOP_EXT;
-  p->length = 2 + 4*n;		/* Two unused bytes + addresses */
-  return 2 + p->length;		/* Type + len + extension data */
-}
-#else
-#define add_rreq_extensions(p) 0 /* Don't add anything */
-#endif
-
 static void
 send_rreq(uip_ipaddr_t *addr)
 {
   struct uaodv_msg_rreq *rm = (struct uaodv_msg_rreq *)uip_appdata;
   int len;
 
-  print_debug("send RREQ for %d.%d.%d.%d\n", uip_ipaddr_to_quad(addr));
+  PRINTF("send RREQ for " IP_FORMAT "\n", IP_PARAMS(addr));
 
   rm->type = UAODV_RREQ_TYPE;
   rm->dest_seqno = last_known_seqno(addr);
@@ -205,12 +173,11 @@
   rm->hop_count = 0;
   rm->rreq_id = htonl(rreq_id++);
   uip_ipaddr_copy(&rm->dest_addr, addr);
-  uip_gethostaddr(&rm->orig_addr);
+  uip_ipaddr_copy(&rm->orig_addr, get_hostaddr(&rm->dest_addr));
   my_hseqno++;			/* Always */
   rm->orig_seqno = htonl(my_hseqno);
   bcastconn->ttl = MY_NET_DIAMETER;
   len = sizeof(struct uaodv_msg_rreq);
-  len += add_rreq_extensions(rm + 1);
   uip_udp_packet_send(bcastconn, rm, len);
 }
 /*---------------------------------------------------------------------------*/
@@ -220,8 +187,8 @@
 {
   struct uaodv_msg_rrep *rm = (struct uaodv_msg_rrep *)uip_appdata;
   
-  print_debug("send RREP orig=%d.%d.%d.%d hops=%d\n",
-	      uip_ipaddr_to_quad(orig), hop_count);
+  PRINTF("send RREP orig=" IP_FORMAT " hops=%d\n",
+	      IP_PARAMS(orig), hop_count);
 
   rm->type = UAODV_RREP_TYPE;
   rm->flags = 0;
@@ -239,7 +206,7 @@
 {
   struct uaodv_msg_rerr *rm = (struct uaodv_msg_rerr *)uip_appdata;
   
-  print_debug("send RERR for %d.%d.%d.%d\n", uip_ipaddr_to_quad(addr));
+  PRINTF("send RERR for " IP_FORMAT "\n", IP_PARAMS(addr));
 
   rm->type = UAODV_RERR_TYPE;
   rm->reserved = 0;
@@ -261,74 +228,32 @@
   uip_ipaddr_t dest_addr, orig_addr;
   struct uaodv_rt_entry *rt, *fw = NULL;
   
-  print_debug("RREQ %d.%d.%d.%d -> %d.%d.%d.%d ttl=%u"
-	      " orig=%d.%d.%d.%d seq=%lu hops=%u dest=%d.%d.%d.%d seq=%lu\n",
-	      uip_ipaddr_to_quad(&BUF->srcipaddr),
-	      uip_ipaddr_to_quad(&BUF->destipaddr),
+  PRINTF("RREQ " IP_FORMAT " -> " IP_FORMAT " ttl=%u"
+	      " orig=" IP_FORMAT " seq=%lu hops=%u dest=" IP_FORMAT " seq=%lu\n",
+	      IP_PARAMS(&BUF->srcipaddr),
+	      IP_PARAMS(&BUF->destipaddr),
 	      BUF->ttl,
-	      uip_ipaddr_to_quad(&rm->orig_addr), ntohl(rm->orig_seqno),
+	      IP_PARAMS(&rm->orig_addr), ntohl(rm->orig_seqno),
 	      rm->hop_count,
-	      uip_ipaddr_to_quad(&rm->dest_addr), ntohl(rm->dest_seqno));
+	      IP_PARAMS(&rm->dest_addr), ntohl(rm->dest_seqno));
 
-  if(uip_ipaddr_cmp(&rm->orig_addr, &uip_hostaddr)) {
+  if(is_hostaddr(&rm->orig_addr)) {
     return;			/* RREQ looped back! */
   }
 
-#ifdef CC2420_RADIO
- {
-   int ret = cc2420_check_remote(uip_udp_sender()->u16[1]);
-
-   if(ret == REMOTE_YES) {
-     print_debug("RREQ drop is remote\n");
-     return;
-   } else if (ret == REMOTE_NO) {
-     /* Is neigbour, accept it. */
-   } else if(cc2420_last_rssi < RSSI_THRESHOLD) {
-     print_debug("RREQ drop %d %d\n", cc2420_last_rssi,
-		 cc2420_last_correlation);
-     return;
-   }
- }
-#endif
-
-#ifdef AODV_BAD_HOP_EXTENSION
-  if(uip_len > (sizeof(*rm) + 2)) {
-    struct uaodv_bad_hop_ext *ext = (void *)(uip_appdata + sizeof(*rm));
-    u8_t *end = uip_appdata + uip_len;
-    for(;
-	(u8_t *)ext < end;
-	ext = (void *)((u8_t *)ext + ext->length + 2)) {
-      u8_t *eend = (u8_t *)ext + ext->length;
-      if(eend > end)
-	eend = end;
-
-      if(ext->type == RREQ_BAD_HOP_EXT) {
-	uip_ipaddr_t *a;
-	for(a = ext->addrs; (u8_t *)a < eend; a++) {
-	  if(uip_ipaddr_cmp(a, &uip_hostaddr)) {
-	    print_debug("BAD_HOP drop\n");
-	    return;
-	  }
-	}
-      }
-    }
-  }
-#endif /* AODV_BAD_HOP_EXTENSION */
-
   /* New reverse route? */
   rt = uaodv_rt_lookup(&rm->orig_addr);
   if(rt == NULL
      || (SCMP32(ntohl(rm->orig_seqno), rt->hseqno) > 0) /* New route. */
      || (SCMP32(ntohl(rm->orig_seqno), rt->hseqno) == 0
 	 && rm->hop_count < rt->hop_count)) { /* Better route. */
-    print_debug("Inserting1\n");
+    PRINTF("Inserting1\n");
     rt = uaodv_rt_add(&rm->orig_addr, uip_udp_sender(),
 		      rm->hop_count, &rm->orig_seqno);
   }
     
   /* Check if it is for our address or a fresh route. */
-  if(uip_ipaddr_cmp(&rm->dest_addr, &uip_hostaddr)
-     || rm->flags & UAODV_RREQ_DESTONLY) {
+      if(is_hostaddr(&rm->dest_addr) || rm->flags & UAODV_RREQ_DESTONLY) {
     fw = NULL;
   } else {
     fw = uaodv_rt_lookup(&rm->dest_addr);
@@ -342,23 +267,23 @@
   if (fw != NULL) {
     u32_t net_seqno;
 
-    print_debug("RREQ for known route\n");
+    PRINTF("RREQ for known route\n");
     uip_ipaddr_copy(&dest_addr, &rm->dest_addr);
     uip_ipaddr_copy(&orig_addr, &rm->orig_addr);
     net_seqno = htonl(fw->hseqno);
     send_rrep(&dest_addr, &rt->nexthop, &orig_addr, &net_seqno,
 	      fw->hop_count + 1);
-  } else if(uip_ipaddr_cmp(&rm->dest_addr, &uip_hostaddr)) {
+  } else if(is_hostaddr(&rm->dest_addr)) {
     u32_t net_seqno;
 
-    print_debug("RREQ for our address\n");
+    PRINTF("RREQ for our address\n");
     uip_ipaddr_copy(&dest_addr, &rm->dest_addr);
     uip_ipaddr_copy(&orig_addr, &rm->orig_addr);
 
     my_hseqno++;
     if(!(rm->flags & UAODV_RREQ_UNKSEQNO)
        && SCMP32(my_hseqno, ntohl(rm->dest_seqno)) < 0) {
-      print_debug("New my_hseqno %lu\n", my_hseqno); /* We have rebooted. */
+      PRINTF("New my_hseqno %lu\n", my_hseqno); /* We have rebooted. */
       my_hseqno = ntohl(rm->dest_seqno) + 1;
     }
     net_seqno = htonl(my_hseqno);
@@ -368,16 +293,15 @@
 
     /* Have we seen this RREQ before? */
     if(fwc_lookup(&rm->orig_addr, &rm->rreq_id)) {
-      print_debug("RREQ cached, not fwd\n");
+      PRINTF("RREQ cached, not fwd\n");
       return;
     }
     fwc_add(&rm->orig_addr, &rm->rreq_id);
 
-    print_debug("RREQ fwd\n");
+    PRINTF("RREQ fwd\n");
     rm->hop_count++;
     bcastconn->ttl = BUF->ttl - 1;
     len = sizeof(struct uaodv_msg_rreq);
-    len += add_rreq_extensions(rm + 1);
     uip_udp_packet_send(bcastconn, rm, len);
   }
 }
@@ -389,57 +313,43 @@
   struct uaodv_rt_entry *rt;
 
   /* Useless HELLO message? */
+#if UIP_CONF_IPV6
+  if(uip_is_addr_linklocal_allnodes_mcast(&BUF->destipaddr)) {
+#else
   if(uip_ipaddr_cmp(&BUF->destipaddr, &uip_broadcast_addr)) {
+#endif
+
 #ifdef AODV_RESPOND_TO_HELLOS
     u32_t net_seqno;
-#ifdef CC2420_RADIO
-    int ret = cc2420_check_remote(uip_udp_sender()->u16[1]);
-
-    if(ret == REMOTE_YES) {
-      print_debug("HELLO drop is remote\n");
-      return;
-    } else if (ret == REMOTE_NO) {
-      /* Is neigbour, accept it. */
-    } else if(cc2420_last_rssi < RSSI_THRESHOLD) {
-      print_debug("HELLO drop %d %d\n", cc2420_last_rssi, cc2420_last_correlation);
-      return;
-    }
-#endif
     /* Sometimes it helps to send a non-requested RREP in response! */
     net_seqno = htonl(my_hseqno);
-    send_rrep(&uip_hostaddr, &BUF->srcipaddr, &BUF->srcipaddr, &net_seqno, 0);
+    send_rrep(get_hostaddr(rm->dest_addr), &BUF->srcipaddr, &BUF->srcipaddr, &net_seqno, 0);
 #endif
     return;
   }
 
-  print_debug("RREP %d.%d.%d.%d -> %d.%d.%d.%d"
-	      " dest=%d.%d.%d.%d seq=%lu hops=%u orig=%d.%d.%d.%d\n",
-	      uip_ipaddr_to_quad(&BUF->srcipaddr),
-	      uip_ipaddr_to_quad(&BUF->destipaddr),
-	      uip_ipaddr_to_quad(&rm->dest_addr), ntohl(rm->dest_seqno),
+  PRINTF("RREP " IP_FORMAT " -> " IP_FORMAT ""
+	      " dest=" IP_FORMAT " seq=%lu hops=%u orig=" IP_FORMAT "\n",
+	      IP_PARAMS(&BUF->srcipaddr),
+	      IP_PARAMS(&BUF->destipaddr),
+	      IP_PARAMS(&rm->dest_addr), ntohl(rm->dest_seqno),
 	      rm->hop_count,
-	      uip_ipaddr_to_quad(&rm->orig_addr));
+	      IP_PARAMS(&rm->orig_addr));
 
   rt = uaodv_rt_lookup(&rm->dest_addr);
 
   /* New forward route? */
   if(rt == NULL || (SCMP32(ntohl(rm->dest_seqno), rt->hseqno) > 0)) {
-    print_debug("Inserting3\n");
+    PRINTF("Inserting3\n");
     rt = uaodv_rt_add(&rm->dest_addr, uip_udp_sender(),
 		      rm->hop_count, &rm->dest_seqno);
-#ifdef CC2420_RADIO
-    /* This link is ok since he is unicasting back to us! */
-    cc2420_recv_ok(uip_udp_sender());
-    print_debug("RREP recv ok %d %d\n",
-		cc2420_last_rssi, cc2420_last_correlation);
-#endif
   } else {
-    print_debug("Not inserting\n");
+    PRINTF("Not inserting\n");
   }
 
   /* Forward RREP towards originator? */
-  if(uip_ipaddr_cmp(&rm->orig_addr, &uip_hostaddr)) {
-    print_debug("ROUTE FOUND\n");
+  if(is_hostaddr(&rm->orig_addr)) {
+    PRINTF("ROUTE FOUND\n");
     if(rm->flags & UAODV_RREP_ACK) {
       struct uaodv_msg_rrep_ack *ack = (void *)uip_appdata;
       ack->type = UAODV_RREP_ACK_TYPE;
@@ -450,19 +360,19 @@
     rt = uaodv_rt_lookup(&rm->orig_addr);
 
     if(rt == NULL) {
-      print_debug("RREP received, but no route back to originator... :-( \n");
+      PRINTF("RREP received, but no route back to originator... :-( \n");
       return;
     }
 
     if(rm->flags & UAODV_RREP_ACK) {
-      print_debug("RREP with ACK request (ignored)!\n");
+      PRINTF("RREP with ACK request (ignored)!\n");
       /* Don't want any RREP-ACKs in return! */
       rm->flags &= ~UAODV_RREP_ACK;
     }
 
     rm->hop_count++;
 
-    print_debug("Fwd RREP to %d.%d.%d.%d\n", uip_ipaddr_to_quad(&rt->nexthop));
+    PRINTF("Fwd RREP to " IP_FORMAT "\n", IP_PARAMS(&rt->nexthop));
 
     sendto(&rt->nexthop, rm, sizeof(struct uaodv_msg_rrep));
   }
@@ -474,14 +384,14 @@
   struct uaodv_msg_rerr *rm = (struct uaodv_msg_rerr *)uip_appdata;
   struct uaodv_rt_entry *rt;
 
-  print_debug("RERR %d.%d.%d.%d -> %d.%d.%d.%d"
-	      " unreach=%d.%d.%d.%d seq=%lu\n",
-	      uip_ipaddr_to_quad(&BUF->srcipaddr),
-	      uip_ipaddr_to_quad(&BUF->destipaddr),
-	      uip_ipaddr_to_quad((uip_ipaddr_t *)&rm->unreach[0]),
+  PRINTF("RERR " IP_FORMAT " -> " IP_FORMAT ""
+	      " unreach=" IP_FORMAT " seq=%lu\n",
+	      IP_PARAMS(&BUF->srcipaddr),
+	      IP_PARAMS(&BUF->destipaddr),
+	      IP_PARAMS((uip_ipaddr_t *)&rm->unreach[0]),
 	      ntohl(rm->unreach[0].seqno));
 
-  if(uip_ipaddr_cmp(&rm->unreach[0].addr, &uip_hostaddr))
+  if(is_hostaddr(&rm->unreach[0].addr))
     return;
 
   rt = uaodv_rt_lookup_any(&rm->unreach[0].addr);
@@ -493,7 +403,7 @@
 	rm->flags &= ~UAODV_RERR_UNKNOWN;
 	rm->unreach[0].seqno = htonl(rt->hseqno);
       }
-      print_debug("RERR rebroadcast\n");
+      PRINTF("RERR rebroadcast\n");
       uip_udp_packet_send(bcastconn, rm, sizeof(struct uaodv_msg_rerr));
     }
   }
@@ -504,7 +414,7 @@
 {
   struct uaodv_msg *m = (struct uaodv_msg *)uip_appdata;
 
-  /*  print_debug("New UDP data, AODV packet type %d\n", m->type);*/
+  /*  PRINTF("New UDP data, AODV packet type %d\n", m->type);*/
   switch(m->type) {
   case UAODV_RREQ_TYPE:
     handle_incoming_rreq();
@@ -584,8 +494,9 @@
 
   PROCESS_BEGIN();
 
-  printf("uaodv_process starting %lu\n", (unsigned long) my_hseqno);
+  PRINTF("uaodv_process starting %lu\n", (unsigned long) my_hseqno);
 
+  udp_bind(udp_new(NULL, HTONS(UAODV_UDPPORT), NULL), HTONS(UAODV_UDPPORT));
   bcastconn = udp_broadcast_new(HTONS(UAODV_UDPPORT), NULL);
   unicastconn = udp_broadcast_new(HTONS(UAODV_UDPPORT), NULL);
   
@@ -621,7 +532,7 @@
   bcastconn = NULL;
   uip_udp_remove(unicastconn);
   unicastconn = NULL;
-  printf("uaodv_process exiting\n");
+  PRINTF("uaodv_process exiting\n");
   PROCESS_END();
 }
 /*---------------------------------------------------------------------------*/
